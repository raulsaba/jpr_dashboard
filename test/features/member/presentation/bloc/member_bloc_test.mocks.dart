// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_jpr_dashboard/test/features/member/presentation/bloc/member_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_jpr_dashboard/core/error/failure.dart' as _i6;
import 'package:flutter_jpr_dashboard/core/usecases/usecase.dart' as _i8;
import 'package:flutter_jpr_dashboard/core/util/input_converter.dart' as _i13;
import 'package:flutter_jpr_dashboard/feature/member/domain/entities/member_entity.dart'
    as _i7;
import 'package:flutter_jpr_dashboard/feature/member/domain/repositories/member_repository.dart'
    as _i2;
import 'package:flutter_jpr_dashboard/feature/member/domain/usecases/create_member.dart'
    as _i10;
import 'package:flutter_jpr_dashboard/feature/member/domain/usecases/get_member.dart'
    as _i9;
import 'package:flutter_jpr_dashboard/feature/member/domain/usecases/get_member_list.dart'
    as _i4;
import 'package:flutter_jpr_dashboard/feature/member/domain/usecases/remove_member.dart'
    as _i12;
import 'package:flutter_jpr_dashboard/feature/member/domain/usecases/update_member.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMemberRepository_0 extends _i1.Fake implements _i2.MemberRepository {
}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetMemberList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMemberList extends _i1.Mock implements _i4.GetMemberList {
  MockGetMemberList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemberRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMemberRepository_0()) as _i2.MemberRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Member>>> call(
          _i8.NoParams? noParams) =>
      (super.noSuchMethod(Invocation.method(#call, [noParams]),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i7.Member>>>.value(
              _FakeEither_1<_i6.Failure, List<_i7.Member>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.Member>>>);
}

/// A class which mocks [GetMember].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMember extends _i1.Mock implements _i9.GetMember {
  MockGetMember() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemberRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMemberRepository_0()) as _i2.MemberRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Member>> call(
          _i9.GetMemberParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.Member>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Member>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Member>>);
}

/// A class which mocks [CreateMember].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateMember extends _i1.Mock implements _i10.CreateMember {
  MockCreateMember() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemberRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMemberRepository_0()) as _i2.MemberRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Member>> call(
          _i10.CreateMemberParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.Member>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Member>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Member>>);
}

/// A class which mocks [UpdateMember].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateMember extends _i1.Mock implements _i11.UpdateMember {
  MockUpdateMember() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemberRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMemberRepository_0()) as _i2.MemberRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Member>> call(
          _i11.UpdateMemberParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.Member>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Member>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Member>>);
}

/// A class which mocks [RemoveMember].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveMember extends _i1.Mock implements _i12.RemoveMember {
  MockRemoveMember() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemberRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMemberRepository_0()) as _i2.MemberRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(
          _i12.RemoveMemberParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither_1<_i6.Failure, bool>()))
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i13.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i6.Failure, int> stringToUnsignedInteger(String? str) =>
      (super.noSuchMethod(Invocation.method(#stringToUnsignedInteger, [str]),
              returnValue: _FakeEither_1<_i6.Failure, int>())
          as _i3.Either<_i6.Failure, int>);
}
